ANSI (American National Standard Institute, 美国国家标准学会) 的ASCII (American Standard Code for Information Interchange, 美国信息互换标准代码) 编码

ASCII 一个字节(0~255)都未用完，只是从0~127号

GB2312(两个字节的全角字符)，而原来在127号以下的那些就叫半角字符

GBK是在GB2312的基础上规定：第一个字节是大于127就固定表示这是一个汉字的开始

GB18030 是在GBK的基础上： 新增了几千个少数民族的字

其中GB2312、GBK、GB18030统称为DBCS(Double Byte Character Set, 双字节字符集)，DBCS的特点：两字节长的汉字字符和一字节长的英文字符并存于同一套编码方案里，因此写的程序为了支持中文处理，必须要注意字串里的每一个字节的值，如果这个值是大于127的，那么就认为一个双字节字符集里的字符出现了


ISO(International Organization for Standardization, 国际标准化组织) 
ISO制定了USC(Universal Multiple-Octet Coded Character Set),俗称 unicode
unicode 全部使用两个字节表示，对于ascii里的那些“半角”字符，UNICODE 包持其原编码不变，只是将其长度由原来的8位扩展为16位，由于"半角"英文符号只需要用到低8位，所以其高8位永远是0，
所以从unicode开始无论是半角的英文字母，还是全角的汉字，它们都是统一的"一个字符"
UNICODE 在制订时没有考虑与任何一种现有的编码方案保持兼容，这使得 GBK 与UNICODE 在汉字的内码编排上完全是不一样的，没有一种简单的算术方法可以把文本内容从UNICODE编码和另一种编码进行转换，这种转换必须通过查表来进行

为了Unicode在网络上的传输，出现了UTF(UCS Transfer Format),故，UTF8就是每次8个位传输数据，而UTF16就是每次16个位，只不过为了传输时的可靠性，从UNICODE到UTF时并不是直接的对应，而是要过一些算法和规则来转换
UTF-8是Unicode的实现方式之一。
UTF-8最大的一个特点，就是它是一种变长的编码方式。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度。

UTF-8的编码规则很简单，只有二条：

1）对于单字节的符号，字节的第一位设为0，后面7位为这个符号的unicode码。因此对于英语字母，UTF-8编码和ASCII码是相同的。

2）对于n字节的符号（n>1），第一个字节的前n位都设为1，第n+1位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的unicode码。


在数据库里，有n前缀的字串类型就是UNICODE类型，这种类型中，固定用两个字节来表示一个字符，无论这个字符是汉字还是英文字母，或是别的


https://blog.csdn.net/lc11535/article/details/100013653?utm_medium=distribute.pc_relevant_right.none-task-blog-BlogCommendFromMachineLearnPai2-2.nonecase&depth_1-utm_source=distribute.pc_relevant_right.none-task-blog-BlogCommendFromMachineLearnPai2-2.nonecase

